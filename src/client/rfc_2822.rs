//! Contains specification on how to format time according to the standard outlined in RFC2822.
//! RFC2822 example: Tue, 1 Jul 2003 10:52:37 +0200

use time::format_description::FormatItem;

//This definition was generated by writing
// ```
// const RFC_2822: &[FormatItem] = time::macros::format_description!("[weekday repr:short], [day padding:none] [month repr:short] [year repr:full] [hour]:[minute]:[second] [offset_hour sign:mandatory][offset_minute]");
// ```
// and looking up the result using `cargo expand`.
pub(crate) const RFC_2822: &[FormatItem] = {
    const DESCRIPTION: &[::time::format_description::FormatItem<'_>] = &[
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Weekday({
                let mut value = ::time::format_description::modifier::Weekday::default();
                value.repr = ::time::format_description::modifier::WeekdayRepr::Short;
                value.one_indexed = true;
                value.case_sensitive = true;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b", "),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Day({
                let mut value = ::time::format_description::modifier::Day::default();
                value.padding = ::time::format_description::modifier::Padding::None;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b" "),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Month({
                let mut value = ::time::format_description::modifier::Month::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value.repr = ::time::format_description::modifier::MonthRepr::Short;
                value.case_sensitive = true;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b" "),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Year({
                let mut value = ::time::format_description::modifier::Year::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value.repr = ::time::format_description::modifier::YearRepr::Full;
                value.iso_week_based = false;
                value.sign_is_mandatory = false;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b" "),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Hour({
                let mut value = ::time::format_description::modifier::Hour::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value.is_12_hour_clock = false;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b":"),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Minute({
                let mut value = ::time::format_description::modifier::Minute::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b":"),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::Second({
                let mut value = ::time::format_description::modifier::Second::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value
            }),
        ),
        ::time::format_description::FormatItem::Literal(b" "),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::OffsetHour({
                let mut value = ::time::format_description::modifier::OffsetHour::default();
                value.sign_is_mandatory = true;
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value
            }),
        ),
        ::time::format_description::FormatItem::Component(
            ::time::format_description::Component::OffsetMinute({
                let mut value = ::time::format_description::modifier::OffsetMinute::default();
                value.padding = ::time::format_description::modifier::Padding::Zero;
                value
            }),
        ),
    ];
    DESCRIPTION
};
